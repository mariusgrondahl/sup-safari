{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/sup-safari/web/pages/post/[slug].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && slug.current == $slug][0]{\\n  title,\\n  _id,\\n  mainImage,\\n  \\\"name\\\": author->name,\\n  \\\"categories\\\": categories[]->title,\\n  \\\"authorImage\\\": author->image,\\n  body\\n}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 0rem 2rem;\\n\\n  img{\\n    width: 100%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../../client';\nimport CenterWrapper from '../../components/CenterWrapper';\nimport Fullscreen from '../../components/Fullscreen';\nimport styled from \"@emotion/styled\";\nvar Article = styled.article(_templateObject());\n_c = Article;\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nvar singlePost = function singlePost(props) {\n  var _props$title = props.title,\n      title = _props$title === void 0 ? 'Mangler tittel' : _props$title,\n      _props$name = props.name,\n      name = _props$name === void 0 ? 'Ukjent' : _props$name,\n      mainImage = props.mainImage,\n      slug = props.slug,\n      _props$body = props.body,\n      body = _props$body === void 0 ? [] : _props$body;\n  return __jsx(React.Fragment, null, __jsx(Fullscreen, {\n    image: urlFor(mainImage).width().url(),\n    text: \"#fff\",\n    height: \"60vh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, title), __jsx(\"span\", {\n    className: \"byline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"Av: \", name)), __jsx(CenterWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Article, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  })))));\n};\n\nvar query = groq(_templateObject2());\n\nsinglePost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"test\" : _context$query$slug;\n            _context.next = 3;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default singlePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/sup-safari/web/pages/post/[slug].js"],"names":["groq","imageUrlBuilder","BlockContent","client","CenterWrapper","Fullscreen","styled","Article","article","urlFor","source","image","singlePost","props","title","name","mainImage","slug","body","width","url","w","h","fit","config","query","getInitialProps","context","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,OAAO,GAAGD,MAAM,CAACE,OAAV,mBAAb;KAAMD,O;;AAQN,SAASE,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOT,eAAe,CAACE,MAAD,CAAf,CAAwBQ,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA,qBAOxBA,KAPwB,CAE1BC,KAF0B;AAAA,MAE1BA,KAF0B,6BAElB,gBAFkB;AAAA,oBAOxBD,KAPwB,CAG1BE,IAH0B;AAAA,MAG1BA,IAH0B,4BAGnB,QAHmB;AAAA,MAI1BC,SAJ0B,GAOxBH,KAPwB,CAI1BG,SAJ0B;AAAA,MAK1BC,IAL0B,GAOxBJ,KAPwB,CAK1BI,IAL0B;AAAA,oBAOxBJ,KAPwB,CAM1BK,IAN0B;AAAA,MAM1BA,IAN0B,4BAMnB,EANmB;AAQ5B,SACE,4BACA,MAAC,UAAD;AAAY,IAAA,KAAK,EAAET,MAAM,CAACO,SAAD,CAAN,CAAkBG,KAAlB,GAA0BC,GAA1B,EAAnB;AAAoD,IAAA,IAAI,EAAC,MAAzD;AAAgE,IAAA,MAAM,EAAC,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,KAAL,CADA,EAEA;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BC,IAA9B,CAFA,CADA,EAMA,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEG,IADV;AAEE,IAAA,YAAY,EAAE;AAAEG,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFhB,KAGMpB,MAAM,CAACqB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADA,CANA,CADF;AAmBD,CA3BD;;AA6BA,IAAMC,KAAK,GAAGzB,IAAH,oBAAX;;AAUAY,UAAU,CAACc,eAAX;AAAA,sEAA6B,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3B;AAD2B,kCAEDA,OAAO,CAACF,KAFP,CAEnBR,IAFmB,EAEnBA,IAFmB,oCAEZ,MAFY;AAAA;AAAA,mBAGdd,MAAM,CAACyB,KAAP,CAAaH,KAAb,EAAoB;AAAER,cAAAA,IAAI,EAAJA;AAAF,aAApB,CAHc;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeL,UAAf","sourcesContent":["import groq from 'groq'\nimport imageUrlBuilder from '@sanity/image-url'\nimport BlockContent from '@sanity/block-content-to-react'\nimport client from '../../client'\nimport CenterWrapper from '../../components/CenterWrapper'\nimport Fullscreen from '../../components/Fullscreen'\nimport styled from \"@emotion/styled\";\n\nconst Article = styled.article`\n  padding: 0rem 2rem;\n\n  img{\n    width: 100%;\n  }\n`;\n\nfunction urlFor (source) {\n  return imageUrlBuilder(client).image(source)\n}\n\nconst singlePost = (props) => {\n  const {\n    title = 'Mangler tittel',\n    name = 'Ukjent',\n    mainImage,\n    slug,\n    body = []\n  } = props\n  return (\n    <>\n    <Fullscreen image={urlFor(mainImage).width().url()} text=\"#fff\" height=\"60vh\" >\n    <h1>{title}</h1>\n    <span className=\"byline\">Av: {name}</span>\n\n    </Fullscreen> \n    <CenterWrapper>\n    <Article>\n\n      <BlockContent\n        blocks={body}\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\n        {...client.config()}\n      />\n   </Article>\n    </CenterWrapper>\n    </>\n  )\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  _id,\n  mainImage,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  \"authorImage\": author->image,\n  body\n}`\n\nsinglePost.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const { slug = \"test\" } = context.query\n  return await client.fetch(query, { slug })\n}\n\nexport default singlePost"]},"metadata":{},"sourceType":"module"}