{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/sup-safari/web/pages/post/[slug].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && slug.current == $slug][0]{\\n  title,\\n  \\\"name\\\": author->name,\\n  \\\"categories\\\": categories[]->title,\\n  \\\"authorImage\\\": author->image,\\n  \\\"imageUrl\\\": image.asset->url\\n  body\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\nimport client from '../../client';\nimport CenterWrapper from '../../components/CenterWrapper';\nimport Fullscreen from '../../components/Fullscreen';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nvar Post = function Post(props) {\n  var _movie = movie,\n      _movie$poster = _movie.poster,\n      _movie$poster$crop = _movie$poster.crop,\n      crop = _movie$poster$crop === void 0 ? {\n    left: 0,\n    top: 0\n  } : _movie$poster$crop,\n      _movie$poster$hotspot = _movie$poster.hotspot,\n      hotspot = _movie$poster$hotspot === void 0 ? {\n    x: 0.5,\n    y: 0.5\n  } : _movie$poster$hotspot;\n  var _props$title = props.title,\n      title = _props$title === void 0 ? 'Missing title' : _props$title,\n      _props$name = props.name,\n      name = _props$name === void 0 ? 'Missing name' : _props$name,\n      categories = props.categories,\n      authorImage = props.authorImage,\n      imageUrl = props.imageUrl,\n      _props$body = props.body,\n      body = _props$body === void 0 ? [] : _props$body;\n  return __jsx(React.Fragment, null, __jsx(\"img\", {\n    src: urlFor(post.imageUrl).width(200).url(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 1\n    }\n  }), __jsx(Fullscreen, {\n    image: urlFor().width().url(),\n    text: \"#fff\",\n    height: \"60vh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, title)), __jsx(CenterWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Av \", name), categories && __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"Posted in\", categories.map(function (category) {\n    return __jsx(\"li\", {\n      key: category,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 39\n      }\n    }, category);\n  })), authorImage && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: urlFor(authorImage).width(50).url(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  })))));\n};\n\n_c = Post;\nvar query = groq(_templateObject());\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n            _context.next = 3;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/sup-safari/web/pages/post/[slug].js"],"names":["groq","imageUrlBuilder","BlockContent","client","CenterWrapper","Fullscreen","urlFor","source","image","Post","props","movie","poster","crop","left","top","hotspot","x","y","title","name","categories","authorImage","imageUrl","body","post","width","url","map","category","w","h","fit","config","query","getInitialProps","context","slug","fetch"],"mappings":"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","sourcesContent":["import groq from 'groq'\nimport imageUrlBuilder from '@sanity/image-url'\nimport BlockContent from '@sanity/block-content-to-react'\nimport client from '../../client'\nimport CenterWrapper from '../../components/CenterWrapper'\nimport Fullscreen from '../../components/Fullscreen'\n\n\n\nfunction urlFor (source) {\n  return imageUrlBuilder(client).image(source)\n}\n\nconst Post = (props) => {\n  const {\n    poster: { crop = { left: 0, top: 0 }, hotspot = { x: 0.5, y: 0.5 } }\n  } = movie\n  \n  const {\n    title = 'Missing title',\n    name = 'Missing name',\n    categories,\n    authorImage,\n    imageUrl,\n    body = []\n  }\n  = props\n  return (\n    <>\n<img src={urlFor(post.imageUrl).width(200).url()} />\n    <Fullscreen image={urlFor().width().url()} text=\"#fff\" height=\"60vh\" >\n    <h1>{title}</h1>\n    </Fullscreen> \n    <CenterWrapper>\n    <article>\n      <span>Av {name}</span>\n      {categories && (\n        <ul>\n          Posted in\n          {categories.map(category => <li key={category}>{category}</li>)}\n        </ul>\n      )}\n      {authorImage && (\n        <div>\n          <img\n            src={urlFor(authorImage)\n              .width(50)\n              .url()}\n          />\n        </div>\n      )}\n      <BlockContent\n        blocks={body}\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\n        {...client.config()}\n      />\n    </article>\n    </CenterWrapper>\n    </>\n  )\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  \"authorImage\": author->image,\n  \"imageUrl\": image.asset->url\n  body\n}`\n\nPost.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const { slug = \"\" } = context.query\n  return await client.fetch(query, { slug })\n}\n\nexport default Post"]},"metadata":{},"sourceType":"module"}