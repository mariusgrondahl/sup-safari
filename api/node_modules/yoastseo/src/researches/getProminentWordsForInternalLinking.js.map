{"version":3,"sources":["../../../src/researches/getProminentWordsForInternalLinking.js"],"names":["getProminentWordsForInternalLinking","paper","researcher","text","getText","language","getLocale","morphologyData","getData","subheadings","map","subheading","attributes","getKeyword","getSynonyms","getTitle","getDescription","join","abbreviations","concat","prominentWordsFromText","prominentWordsFromPaperAttributes","forEach","relevantWord","setOccurrences","getOccurrences","collapsedWords"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AAQA;;;;AAEA;;;;;;;;AAQA,SAASA,mCAAT,CAA8CC,KAA9C,EAAqDC,UAArD,EAAkE;AACjE,OAAMC,OAAOF,MAAMG,OAAN,EAAb;AACA,OAAMC,WAAW,2BAAaJ,MAAMK,SAAN,EAAb,CAAjB;AACA,OAAMC,iBAAiB,mBAAKL,WAAWM,OAAX,CAAoB,YAApB,CAAL,EAAyCH,QAAzC,EAAmD,KAAnD,CAAvB;;AAEA,OAAMI,cAAc,4CAAwBN,IAAxB,EAA+BO,GAA/B,CAAoCC,cAAcA,WAAY,CAAZ,CAAlD,CAApB;AACA,OAAMC,aAAa,CAClBX,MAAMY,UAAN,EADkB,EAElBZ,MAAMa,WAAN,EAFkB,EAGlBb,MAAMc,QAAN,EAHkB,EAIlBd,MAAMe,cAAN,EAJkB,EAKlBP,YAAYQ,IAAZ,CAAkB,GAAlB,CALkB,CAAnB;;AAQA,OAAMC,gBAAgB,oDAAuBf,KAAKgB,MAAL,CAAaP,WAAWK,IAAX,CAAiB,GAAjB,CAAb,CAAvB,CAAtB;;AAEA,OAAMG,yBAAyB,gDAAmB,+CAA2BjB,IAA3B,CAAnB,EAAsDe,aAAtD,EAAqEb,QAArE,EAA+EE,cAA/E,CAA/B;;AAEA,OAAMc,oCAAoC,mEAAsCT,UAAtC,EAAkDM,aAAlD,EAAiEb,QAAjE,EAA2EE,cAA3E,CAA1C;;AAEA;;;;AAIAc,mCAAkCC,OAAlC,CAA2CC,gBAAgBA,aAAaC,cAAb,CAA6BD,aAAaE,cAAb,KAAgC,CAA7D,CAA3D;;AAEA,OAAMC,iBAAiB,2DAA8BL,kCAAkCF,MAAlC,CAA0CC,sBAA1C,CAA9B,CAAvB;AACA,kDAAoBM,cAApB;;AAEA;;;;;;;AAOA,QAAO,oBAAM,mDAAsBA,cAAtB,EAAsC,CAAtC,CAAN,EAAiD,GAAjD,CAAP;AACA;;kBAGc1B,mC","file":"getProminentWordsForInternalLinking.js","sourcesContent":["import { get, take } from \"lodash-es\";\nimport getLanguage from \"../helpers/getLanguage\";\nimport {\n\tcollapseProminentWordsOnStem,\n\tfilterProminentWords,\n\tgetProminentWords,\n\tgetProminentWordsFromPaperAttributes,\n\tretrieveAbbreviations,\n\tsortProminentWords,\n} from \"../stringProcessing/determineProminentWords\";\nimport { getSubheadingsTopLevel, removeSubheadingsTopLevel } from \"../stringProcessing/getSubheadings\";\n\n/**\n * Retrieves the prominent words from the given paper.\n *\n * @param {Paper} paper The paper to determine the prominent words of.\n * @param {Researcher} researcher The researcher to use for analysis.\n *\n * @returns {WordCombination[]} Prominent words for this paper, filtered and sorted.\n */\nfunction getProminentWordsForInternalLinking( paper, researcher ) {\n\tconst text = paper.getText();\n\tconst language = getLanguage( paper.getLocale() );\n\tconst morphologyData = get( researcher.getData( \"morphology\" ), language, false );\n\n\tconst subheadings = getSubheadingsTopLevel( text ).map( subheading => subheading[ 2 ] );\n\tconst attributes = [\n\t\tpaper.getKeyword(),\n\t\tpaper.getSynonyms(),\n\t\tpaper.getTitle(),\n\t\tpaper.getDescription(),\n\t\tsubheadings.join( \" \" ),\n\t];\n\n\tconst abbreviations = retrieveAbbreviations( text.concat( attributes.join( \" \" ) ) );\n\n\tconst prominentWordsFromText = getProminentWords( removeSubheadingsTopLevel( text ), abbreviations, language, morphologyData );\n\n\tconst prominentWordsFromPaperAttributes = getProminentWordsFromPaperAttributes( attributes, abbreviations, language, morphologyData );\n\n\t/*\n\t * If a word is used in any of the attributes, its weight is automatically high.\n\t * To make sure the word survives weight filters and gets saved in the database, make the number of occurrences times-3.\n\t */\n\tprominentWordsFromPaperAttributes.forEach( relevantWord => relevantWord.setOccurrences( relevantWord.getOccurrences() * 3 ) );\n\n\tconst collapsedWords = collapseProminentWordsOnStem( prominentWordsFromPaperAttributes.concat( prominentWordsFromText ) );\n\tsortProminentWords( collapsedWords );\n\n\t/*\n\t * Return the 100 top items from the collapsed and sorted list. The number is picked deliberately to prevent larger\n\t * articles from getting too long of lists.\n\t *\n\t * Minimum required occurrences set to 4 in order to avoid premature suggestions of words fro  the paper attributes.\n\t * These get a times-3 boost and would therefore be prominent with just 1 occurrence.\n\t */\n\treturn take( filterProminentWords( collapsedWords, 4 ), 100 );\n}\n\n\nexport default getProminentWordsForInternalLinking;\n"]}